from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ContentType
from loader import dp, bot
from data.config import ADMIN_ID
from utils.states import Order
import keyboards.default.reply_keyboards as kb
from utils.database import DBCommands
from aiogram.dispatcher import FSMContext

db = DBCommands()


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await db.add_new_user()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π –∑–Ω–∞—á–æ–∫ –ø–æ —Ñ–æ—Ç–æ',
                         reply_markup=kb.start)


@dp.message_handler(text='üìå–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —ç—Å–∫–∏–∑üìå', state='*')
async def sketch_handler(message: types.Message):
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç—Å–∫–∏–∑–∞')
    await Order.photo.set()


@dp.message_handler(content_types=ContentType.PHOTO, state=Order.photo)
async def photo_handler(message: types.Message, state: FSMContext):
    print(message.content_type)
    if message.photo:
        await state.update_data(message_id=message.message_id)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∫–æ–≤')
        await Order.quantity.set()
    else:
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏')


@dp.message_handler(state=Order.quantity)
async def quantity_handler(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        await bot.forward_message(ADMIN_ID, message.chat.id, data.get('message_id'))
        await bot.send_message(ADMIN_ID, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {message.text}')
        await db.add_new_order(int(message.text))
        await message.answer('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–Ω–∞—á–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n'
                             '<i>üìå–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —ç—Å–∫–∏–∑üìå</i>' )
        await state.reset_state()
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(text="üîç–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞üîç", state='*')
async def queue_handler(message: types.Message):
    try:
        quantity = await db.get_quantity_order()
        await message.answer(f'–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {60 - int(quantity)} –∑–Ω–∞—á–∫–æ–≤')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')



